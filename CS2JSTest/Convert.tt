<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ assembly name="System.Core" #>
<#
	var typeInfo = new[]
	{
		new { Type = typeof(byte), Size = sizeof(byte) },
		new { Type = typeof(sbyte), Size = sizeof(sbyte) },

		new { Type = typeof(char), Size = sizeof(char) },

		new { Type = typeof(short), Size = sizeof(short) },
		new { Type = typeof(ushort), Size = sizeof(ushort) },

		new { Type = typeof(int), Size = sizeof(int) },
		new { Type = typeof(uint), Size = sizeof(uint) },

		new { Type = typeof(long), Size = sizeof(long) },
		new { Type = typeof(ulong), Size = sizeof(ulong) },

		new { Type = typeof(double), Size = sizeof(double) },
		new { Type = typeof(float), Size = sizeof(float) }
	};

	var acceptedTypes = string.Join(", ", typeInfo.Select(t => t.Type.Name));
#>
using System;
using System.Linq;

public static class Convert
{
	public static byte[] ToBytes<T>(T value)
	{
		var inputTypeName = typeof(T).Name;

		switch(inputTypeName)
		{
<# foreach (var ti in typeInfo) { #>
			case "<#= ti.Type.Name #>": return <#= ti.Size == 1 ? "new[] { (byte)(object)value }" : $"BitConverter.GetBytes(({ti.Type.Name})(object)value)" #>;
<# } #>
			default: throw new NotSupportedException($"Input type <{inputTypeName}> is not one of: <#= acceptedTypes #>");
		}
	}

	public static byte[] ToBytes<T>(T[] values) => values?.SelectMany(v => ToBytes<T>(v)).ToArray();

	public static T FromBytes<T>(byte[] bytes)
	{
		if (bytes == null) throw new ArgumentNullException(nameof(bytes), $"{nameof(bytes)} is null");

		var returnTypeName = typeof(T).Name;

		switch (returnTypeName)
		{
<# foreach (var ti in typeInfo) { #>
			case "<#= ti.Type.Name #>": return bytes.Length == <#= ti.Size #> ?
				(T)(object) <#= ti.Size == 1 ? "bytes[0]" : $"BitConverter.To{ti.Type.Name}(bytes, 0)" #> :
				throw new ArgumentException($"{nameof(bytes)}.Length should be <#= ti.Size #> for {nameof(FromBytes)}<<#= ti.Type.Name #>>");

<# } #>
			default: throw new NotSupportedException($"Return type <{returnTypeName}> is not one of: <#= acceptedTypes #>");
		}
	}
}